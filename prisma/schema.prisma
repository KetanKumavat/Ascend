generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  clerkUserId   String    @unique
  email         String    @unique
  name          String?
  imageUrl      String?
  githubUsername String?
  createdIssues Issue[]   @relation("Reporter")
  assignedIssues Issue[]  @relation("Assignee")
  messages      Message[]  @relation("UserMessages")
  createdMeetings Meeting[] @relation("MeetingCreator")
  meetingParticipants MeetingParticipant[]
  createdCanvases Canvas[] @relation("CanvasCreator")
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  @@index([clerkUserId], name: "idx_user_clerk_user_id")
  @@index([email], name: "idx_user_email")
}

model Project {
  id             String   @id @default(cuid())
  name           String
  key            String
  description    String?
  organizationId String
  repoName       String?
  sprints        Sprint[]
  issues         Issue[]
  messages       Message[] @relation("ProjectMessages")
  meetings       Meeting[]
  canvases       Canvas[]
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  @@unique([organizationId, key])
  @@index([organizationId], name: "idx_project_organization_id")
  @@index([name], name: "idx_project_name")
  @@index([createdAt], name: "idx_project_created_at")
}

model Sprint {
  id        String   @id @default(cuid())
  name      String   @unique
  startDate DateTime
  endDate   DateTime
  status    SprintStatus @default(PLANNED)
  project   Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
  projectId String
  issues    Issue[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([projectId], name: "idx_sprint_project_id")
  @@index([status], name: "idx_sprint_status")
  @@index([startDate], name: "idx_sprint_start_date")
  @@index([endDate], name: "idx_sprint_end_date")
}

model Issue {
  id          String     @id @default(cuid())
  title       String
  description String?
  status      IssueStatus
  order       Int
  priority    IssuePriority
  assignee    User?      @relation("Assignee", fields: [assigneeId], references: [id])
  assigneeId  String?
  reporter    User       @relation("Reporter", fields: [reporterId], references: [id])
  reporterId  String
  project     Project    @relation(fields: [projectId], references: [id], onDelete: Cascade)
  projectId   String
  sprint      Sprint?    @relation(fields: [sprintId], references: [id], onDelete: SetNull)
  sprintId    String?
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt

  @@index([status, order])
  @@index([projectId], name: "idx_issue_project_id")
  @@index([sprintId], name: "idx_issue_sprint_id")
  @@index([assigneeId], name: "idx_issue_assignee_id")
  @@index([reporterId], name: "idx_issue_reporter_id")
  @@index([status], name: "idx_issue_status")
  @@index([priority], name: "idx_issue_priority")
  @@index([projectId, status], name: "idx_issue_project_status")
  @@index([assigneeId, projectId, status], name: "idx_issue_assignee_project_status")
  @@index([reporterId, projectId, status], name: "idx_issue_reporter_project_status")
}

model Message {
  id         String   @id @default(cuid())
  content    String
  createdAt  DateTime @default(now())
  projectId  String
  userId     String
  user       User     @relation(fields: [userId], references: [id], name: "UserMessages")
  project    Project  @relation(fields: [projectId], references: [id], name: "ProjectMessages")

  @@index([projectId], name: "idx_message_project_id")
  @@index([userId], name: "idx_message_user_id")
  @@index([createdAt], name: "idx_message_created_at")
}

enum SprintStatus {
  PLANNED
  ACTIVE
  COMPLETED
}

enum IssueStatus {
  TODO
  IN_PROGRESS
  IN_REVIEW
  DONE
}

enum IssuePriority {
  LOW
  MEDIUM
  HIGH
  URGENT
}

model Meeting {
  id             String   @id @default(cuid())
  title          String
  description    String?
  meetingId      String?  @unique  // Google Meet meeting ID
  meetingUrl     String?  // Join URL
  googleEventId  String?  // Google Calendar event ID
  scheduledAt    DateTime
  duration       Int?     // in minutes
  status         MeetingStatus @default(SCHEDULED)
  organizationId String
  projectId      String?  // Optional: meeting can be project-specific
  createdById    String   // Admin/PM who created
  createdBy      User     @relation("MeetingCreator", fields: [createdById], references: [id])
  project        Project? @relation(fields: [projectId], references: [id])
  participants   MeetingParticipant[]
  transcript     MeetingTranscript?
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  @@index([organizationId], name: "idx_meeting_organization_id")
  @@index([projectId], name: "idx_meeting_project_id")
  @@index([status], name: "idx_meeting_status")
  @@index([scheduledAt], name: "idx_meeting_scheduled_at")
  @@index([createdById], name: "idx_meeting_created_by")
  @@index([organizationId, projectId], name: "idx_meeting_org_project")
  @@index([organizationId, status, scheduledAt], name: "idx_meeting_org_status_scheduled")
}

model MeetingParticipant {
  id        String  @id @default(cuid())
  meetingId String
  userId    String
  status    ParticipantStatus @default(INVITED)
  joinedAt  DateTime?
  leftAt    DateTime?
  meeting   Meeting @relation(fields: [meetingId], references: [id], onDelete: Cascade)
  user      User    @relation(fields: [userId], references: [id])
  
  @@unique([meetingId, userId])
  @@index([meetingId], name: "idx_meeting_participant_meeting_id")
  @@index([userId], name: "idx_meeting_participant_user_id")
  @@index([status], name: "idx_meeting_participant_status")
}

model MeetingTranscript {
  id          String   @id @default(cuid())
  meetingId   String   @unique
  content     String   // Full transcript
  highlights  String?  // AI-generated highlights/summary
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  meeting     Meeting  @relation(fields: [meetingId], references: [id], onDelete: Cascade)

  @@index([meetingId], name: "idx_transcript_meeting_id")
  @@index([createdAt], name: "idx_transcript_created_at")
}

enum MeetingStatus {
  SCHEDULED
  IN_PROGRESS
  COMPLETED
  CANCELLED
}

enum ParticipantStatus {
  INVITED
  JOINED
  LEFT
  DECLINED
}

model Canvas {
  id             String   @id @default(cuid())
  title          String
  elements       String   // JSON string of Excalidraw elements
  appState       String   // JSON string of Excalidraw app state
  organizationId String
  projectId      String?  // Optional - can be organization-wide or project-specific
  createdById    String
  isDefault      Boolean  @default(false) // Whether this is the default canvas for org/project
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  
  createdBy      User     @relation("CanvasCreator", fields: [createdById], references: [id])
  project        Project? @relation(fields: [projectId], references: [id], onDelete: Cascade)
  
  @@unique([organizationId, projectId, isDefault]) // Ensure only one default canvas per org/project
  @@index([organizationId], name: "idx_canvas_organization_id")
  @@index([projectId], name: "idx_canvas_project_id")
  @@index([createdById], name: "idx_canvas_created_by")
  @@index([isDefault], name: "idx_canvas_is_default")
  @@index([organizationId, projectId, isDefault], name: "idx_canvas_org_project_default")
}