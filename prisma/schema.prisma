generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  clerkUserId   String    @unique
  email         String    @unique
  name          String?
  imageUrl      String?
  githubUsername String?
  createdIssues Issue[]   @relation("Reporter")
  assignedIssues Issue[]  @relation("Assignee")
  messages      Message[]  @relation("UserMessages")
  createdMeetings Meeting[] @relation("MeetingCreator")
  meetingParticipants MeetingParticipant[]
  createdCanvases Canvas[] @relation("CanvasCreator")
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  @@index([clerkUserId], name: "idx_user_clerk_user_id")
  @@index([email], name: "idx_user_email")
}

model Project {
  id             String   @id @default(cuid())
  name           String
  key            String
  description    String?
  organizationId String
  repoName       String?
  sprints        Sprint[]
  issues         Issue[]
  messages       Message[] @relation("ProjectMessages")
  meetings       Meeting[]
  canvases       Canvas[]
  commits        Commit[]
  dailySummaries DailySummary[]
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  @@unique([organizationId, key])
  @@index([organizationId], name: "idx_project_organization_id")
  @@index([name], name: "idx_project_name")
  @@index([createdAt], name: "idx_project_created_at")
}

model Sprint {
  id        String   @id @default(cuid())
  name      String   @unique
  startDate DateTime
  endDate   DateTime
  status    SprintStatus @default(PLANNED)
  project   Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
  projectId String
  issues    Issue[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([projectId], name: "idx_sprint_project_id")
  @@index([status], name: "idx_sprint_status")
  @@index([startDate], name: "idx_sprint_start_date")
  @@index([endDate], name: "idx_sprint_end_date")
}

model Issue {
  id          String     @id @default(cuid())
  title       String
  description String?
  status      IssueStatus
  order       Int
  priority    IssuePriority
  assignee    User?      @relation("Assignee", fields: [assigneeId], references: [id])
  assigneeId  String?
  reporter    User       @relation("Reporter", fields: [reporterId], references: [id])
  reporterId  String
  project     Project    @relation(fields: [projectId], references: [id], onDelete: Cascade)
  projectId   String
  sprint      Sprint?    @relation(fields: [sprintId], references: [id], onDelete: SetNull)
  sprintId    String?
  githubIssueNumber Int?  // GitHub issue number for tracking imported issues
  githubIssueUrl    String? // GitHub issue URL for reference
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt

  @@index([status, order])
  @@index([projectId], name: "idx_issue_project_id")
  @@index([sprintId], name: "idx_issue_sprint_id")
  @@index([assigneeId], name: "idx_issue_assignee_id")
  @@index([reporterId], name: "idx_issue_reporter_id")
  @@index([status], name: "idx_issue_status")
  @@index([priority], name: "idx_issue_priority")
  @@index([projectId, status], name: "idx_issue_project_status")
  @@index([assigneeId, projectId, status], name: "idx_issue_assignee_project_status")
  @@index([reporterId, projectId, status], name: "idx_issue_reporter_project_status")
  @@index([githubIssueNumber], name: "idx_issue_github_number")
}

model Message {
  id         String   @id @default(cuid())
  content    String
  createdAt  DateTime @default(now())
  projectId  String
  userId     String
  user       User     @relation(fields: [userId], references: [id], name: "UserMessages")
  project    Project  @relation(fields: [projectId], references: [id], name: "ProjectMessages")

  @@index([projectId], name: "idx_message_project_id")
  @@index([userId], name: "idx_message_user_id")
  @@index([createdAt], name: "idx_message_created_at")
}

enum SprintStatus {
  PLANNED
  ACTIVE
  COMPLETED
}

enum IssueStatus {
  TODO
  IN_PROGRESS
  IN_REVIEW
  DONE
}

enum IssuePriority {
  LOW
  MEDIUM
  HIGH
  URGENT
}

model Meeting {
  id             String   @id @default(cuid())
  title          String
  description    String?
  meetingId      String?  @unique
  meetingUrl     String?
  googleEventId  String?
  isExternal     Boolean  @default(false)
  externalUrl    String?
  externalPlatform String?
  isPublic       Boolean  @default(false)
  publicToken    String?  @unique
  scheduledAt    DateTime
  duration       Int?
  status         MeetingStatus @default(SCHEDULED)
  organizationId String
  projectId      String?
  createdById    String
  createdBy      User     @relation("MeetingCreator", fields: [createdById], references: [id])
  project        Project? @relation(fields: [projectId], references: [id])
  participants   MeetingParticipant[]
  transcript     MeetingTranscript?
  transcriptSegments TranscriptSegment[]
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  @@index([organizationId], name: "idx_meeting_organization_id")
  @@index([projectId], name: "idx_meeting_project_id")
  @@index([status], name: "idx_meeting_status")
  @@index([scheduledAt], name: "idx_meeting_scheduled_at")
  @@index([createdById], name: "idx_meeting_created_by")
  @@index([isExternal], name: "idx_meeting_is_external")
  @@index([organizationId, projectId], name: "idx_meeting_org_project")
  @@index([organizationId, status, scheduledAt], name: "idx_meeting_org_status_scheduled")
}

model MeetingParticipant {
  id        String  @id @default(cuid())
  meetingId String
  userId    String
  status    ParticipantStatus @default(INVITED)
  joinedAt  DateTime?
  leftAt    DateTime?
  meeting   Meeting @relation(fields: [meetingId], references: [id], onDelete: Cascade)
  user      User    @relation(fields: [userId], references: [id])
  
  @@unique([meetingId, userId])
  @@index([meetingId], name: "idx_meeting_participant_meeting_id")
  @@index([userId], name: "idx_meeting_participant_user_id")
  @@index([status], name: "idx_meeting_participant_status")
}

model MeetingTranscript {
  id          String   @id @default(cuid())
  meetingId   String   @unique
  content     String
  summary     String?
  highlights  String?
  actionItems String?
  speakers    String?
  duration    Int?
  audioPath   String?
  processing  Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  meeting     Meeting  @relation(fields: [meetingId], references: [id], onDelete: Cascade)

  @@index([meetingId], name: "idx_transcript_meeting_id")
  @@index([createdAt], name: "idx_transcript_created_at")
  @@index([processing], name: "idx_transcript_processing")
}

model TranscriptSegment {
  id            String   @id @default(cuid())
  meetingId     String
  participantId String?
  text          String
  speaker       String?
  isFinal       Boolean  @default(false)
  language      String   @default("en")
  type          TranscriptType @default(RAW)
  timestamp     DateTime @default(now())
  meeting       Meeting @relation(fields: [meetingId], references: [id], onDelete: Cascade)

  @@index([meetingId], name: "idx_segment_meeting_id")
  @@index([timestamp], name: "idx_segment_timestamp")
  @@index([isFinal], name: "idx_segment_is_final")
  @@index([type], name: "idx_segment_type")
}

enum TranscriptType {
  RAW
  PROCESSED
  HIGHLIGHTS
  SUMMARY
}

enum MeetingStatus {
  SCHEDULED
  IN_PROGRESS
  COMPLETED
  CANCELLED
}

enum ParticipantStatus {
  INVITED
  JOINED
  LEFT
  DECLINED
}

model Canvas {
  id             String   @id @default(cuid())
  title          String
  elements       String
  appState       String
  organizationId String
  projectId      String?
  createdById    String
  isDefault      Boolean  @default(false)
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  
  createdBy      User     @relation("CanvasCreator", fields: [createdById], references: [id])
  project        Project? @relation(fields: [projectId], references: [id], onDelete: Cascade)
  
  @@unique([organizationId, projectId, isDefault])
  @@index([organizationId], name: "idx_canvas_organization_id")
  @@index([projectId], name: "idx_canvas_project_id")
  @@index([createdById], name: "idx_canvas_created_by")
  @@index([isDefault], name: "idx_canvas_is_default")
  @@index([organizationId, projectId, isDefault], name: "idx_canvas_org_project_default")
}

model Commit {
  id            String   @id @default(cuid())
  sha           String   @unique
  message       String
  author        String
  authorEmail   String?
  commitDate    DateTime
  htmlUrl       String
  projectId     String
  totalChanges  Int?
  additions     Int?
  deletions     Int?
  filesChanged  Json?
  fetchedAt     DateTime @default(now())
  project       Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
  report        CommitReport?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  @@index([projectId], name: "idx_commit_project_id")
  @@index([commitDate], name: "idx_commit_date")
  @@index([sha], name: "idx_commit_sha")
  @@index([projectId, commitDate], name: "idx_commit_project_date")
}

model CommitReport {
  id          String   @id @default(cuid())
  commitId    String   @unique
  content     String
  summary     String?
  impact      String?
  generatedAt DateTime @default(now())
  commit      Commit   @relation(fields: [commitId], references: [id], onDelete: Cascade)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([commitId], name: "idx_commit_report_commit_id")
  @@index([generatedAt], name: "idx_commit_report_generated_at")
}

model DailySummary {
  id             String   @id @default(cuid())
  projectId      String
  date           DateTime
  content        String
  commitsCount   Int
  totalAdditions Int?
  totalDeletions Int?
  emailSent      Boolean  @default(false)
  emailSentAt    DateTime?
  project        Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  @@unique([projectId, date])
  @@index([projectId], name: "idx_daily_summary_project_id")
  @@index([date], name: "idx_daily_summary_date")
  @@index([projectId, date], name: "idx_daily_summary_project_date")
}